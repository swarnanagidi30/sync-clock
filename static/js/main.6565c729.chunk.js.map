{"version":3,"sources":["components/ClockEditor/ClockEditor.jsx","components/AnalogClock/AnalogClock.jsx","components/DigitalClock/DigitalClock.jsx","App.jsx","serviceWorker.js","index.js"],"names":["ClockEditor","props","date","onClose","useState","getHours","hours","setHours","getMinutes","minutes","setMinutes","getSeconds","seconds","setSeconds","className","onClick","defaultValue","onChange","e","target","value","Array","map","x","i","key","Date","AnalogClock","datediff","onDateChange","refClockInterval","useRef","showEditor","setShowEditor","handleDate","useCallback","formatTime","time","useEffect","current","setInterval","clearInterval","console","log","minutesDeg","hoursDeg","secondsStyle","transform","minutesStyle","hoursStyle","style","aria-hidden","DigitalClock","App","setDate","clockInterval","dt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uUAGe,SAASA,EAAYC,GAAQ,IAChCC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QADyB,EAEbC,mBAASF,EAAKG,YAFD,mBAEhCC,EAFgC,KAEzBC,EAFyB,OAGTH,mBAASF,EAAKM,cAHL,mBAGhCC,EAHgC,KAGvBC,EAHuB,OAITN,mBAASF,EAAKS,cAJL,mBAIhCC,EAJgC,KAIvBC,EAJuB,KAevC,OACI,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,iBACX,0BAAMA,UAAU,eAAeC,QAbvB,WACZZ,GAAWA,EAAQD,KAYf,QACA,yCACA,yBAAKY,UAAU,gBACX,4BAAQE,aAAcV,EAAOW,SAAU,SAACC,GAAD,OAAOX,EAASW,EAAEC,OAAOC,SAC3D,YAAIC,MAAM,KAAKC,KAAI,SAACC,EAAGC,GAAJ,OAChB,4BAAQC,IAAKD,GAAKA,OAH9B,IAOI,4BAAQR,aAAcP,EAASQ,SAAU,SAACC,GAAD,OAAOR,EAAWQ,EAAEC,OAAOC,SAC/D,YAAIC,MAAM,KAAKC,KAAI,SAACC,EAAGC,GAAJ,OAChB,4BAAQC,IAAKD,GAAKA,OAT9B,IAaI,4BAAQR,aAAcJ,EAASK,SAAU,SAACC,GAAD,OAAOL,EAAWK,EAAEC,OAAOC,SAC/D,YAAIC,MAAM,KAAKC,KAAI,SAACC,EAAGC,GAAJ,OAChB,4BAAQC,IAAKD,GAAKA,OAG1B,4BAAQV,UAAU,YAAYC,QA9B7B,WACb,IAAMb,EAAO,IAAIwB,KACjBxB,EAAKK,SAASD,GACdJ,EAAKQ,WAAWD,GAChBP,EAAKW,WAAWD,GACZT,GAAWA,EAAQD,KAyBX,SCrCL,SAASyB,EAAY1B,GAAQ,IAChCC,EAAiCD,EAAjCC,KAAM0B,EAA2B3B,EAA3B2B,SAAUC,EAAiB5B,EAAjB4B,aAClBC,EAAmBC,iBAAO,MAFO,EAIb3B,mBAASF,EAAKG,YAJD,mBAIhCC,EAJgC,KAIzBC,EAJyB,OAKTH,mBAASF,EAAKM,cALL,mBAKhCC,EALgC,KAKvBC,EALuB,OAMTN,mBAASF,EAAKS,cANL,mBAMhCC,EANgC,KAMvBC,EANuB,OAOHT,oBAAS,GAPN,mBAOhC4B,EAPgC,KAOpBC,EAPoB,KASjCC,EAAaC,uBACf,WACI,IAAMC,EAAa,SAACC,GAChB,OAAOA,EAAO,GAAP,WAAgBA,GAASA,GAEpCnC,EAAKK,SAASL,EAAKG,YAAcuB,GAAY,IAC7CrB,EAAS6B,EAAWlC,EAAKG,aACzBK,EAAW0B,EAAWlC,EAAKM,eAC3BK,EAAWuB,EAAWlC,EAAKS,iBAE/B,CAACiB,EAAU1B,IAGfoC,qBAAU,WAGN,OADAR,EAAiBS,QAAUC,YAAYN,EAAY,KAC5C,WACHO,cAAcX,EAAiBS,SAC/BG,QAAQC,IAAI,cAEjB,CAACf,EAAUE,EAAkB5B,EAAMgC,IAEtC,IACMU,EAAwB,IAAVnC,EAAgB,GAAiB,IAAVG,EAAgB,GAAM,GAC3DiC,EAAmB,IAARvC,EAAc,GAAiB,IAAVG,EAAgB,GAAM,GAEtDqC,EAAe,CAEjBC,UAAU,UAAD,OANgB,IAAVnC,EAAgB,GAMtB,+BAEPoC,EAAe,CACjBD,UAAU,UAAD,OAAYH,EAAZ,+BAEPK,EAAa,CACfF,UAAU,UAAD,OAAYF,EAAZ,+BAYb,OACI,yBAAK/B,UAAU,eACX,yBAAKA,UAAW,gBACZ,yBAAKA,UAAW,SACZ,yBAAKA,UAAW,cAAeoC,MAAOJ,IACtC,yBAAKhC,UAAW,cAAeoC,MAAOF,IACtC,yBAAKlC,UAAW,YAAaoC,MAAOD,IACpC,yBAAKnC,UAAU,eACV,YAAIO,MAAM,KAAKC,KAAI,SAACC,EAAGC,GAAJ,OAChB,yBAAKV,UAAU,aAAaW,IAAKD,SAI7C,yBAAKV,UAAU,iBACX,uBAAGA,UAAU,YAAYqC,cAAY,OAAOpC,QAvBzC,WACf0B,cAAcX,EAAiBS,SAC/BN,GAAc,OAuBLD,GAAc,kBAAC,EAAD,CAAa9B,KAAMA,EAAMC,QArB5B,SAACD,GACrB4B,EAAiBS,QAAUC,YAAYN,EAAY,KACnDD,GAAc,GACdJ,EAAa3B,Q,MCrDN,SAASkD,EAAanD,GAAQ,IACjCC,EAAiCD,EAAjCC,KAAM0B,EAA2B3B,EAA3B2B,SAAUC,EAAiB5B,EAAjB4B,aAClBC,EAAmBC,iBAAO,MAFQ,EAId3B,mBAASF,EAAKG,YAJA,mBAIjCC,EAJiC,KAI1BC,EAJ0B,OAKVH,mBAASF,EAAKM,cALJ,mBAKjCC,EALiC,KAKxBC,EALwB,OAMVN,mBAASF,EAAKS,cANJ,mBAMjCC,EANiC,KAMxBC,EANwB,OAOJT,oBAAS,GAPL,mBAOjC4B,EAPiC,KAOrBC,EAPqB,KASlCC,EAAaC,uBACf,WACI,IAAMC,EAAa,SAACC,GAChB,OAAOA,EAAO,GAAP,WAAgBA,GAASA,GAEpCnC,EAAKK,SAASL,EAAKG,YAAcuB,GAAY,IAC7CrB,EAAS6B,EAAWlC,EAAKG,aACzBK,EAAW0B,EAAWlC,EAAKM,eAC3BK,EAAWuB,EAAWlC,EAAKS,iBAE/B,CAACiB,EAAU1B,IAGfoC,qBAAU,WAGN,OADAR,EAAiBS,QAAUC,YAAYN,EAAY,KAC5C,WACHO,cAAcX,EAAiBS,SAC/BG,QAAQC,IAAI,cAEjB,CAACf,EAAUE,EAAkB5B,EAAMgC,IAWtC,OACI,yBAAKpB,UAAU,gBACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,SACX,0BAAMA,UAAU,QAAhB,IAA0BR,GAD9B,IAEC,0BAAMQ,UAAU,QAAQL,GAFzB,IAGC,0BAAMK,UAAU,QAAQF,IAEzB,yBAAKE,UAAU,iBACX,uBAAGA,UAAU,YAAYqC,cAAY,OAAOpC,QAlBzC,WACf0B,cAAcX,EAAiBS,SAC/BN,GAAc,QAmBTD,GAAc,kBAAC,EAAD,CAAa9B,KAAMA,EAAMC,QAjBxB,SAACD,GACrB4B,EAAiBS,QAAUC,YAAYN,EAAY,KACnDD,GAAc,GACdJ,EAAa3B,OCRNmD,MA7Bf,WAAgB,IAAD,EACWjD,mBAAS,IAAIsB,MADxB,mBACNxB,EADM,KACAoD,EADA,KAcb,OAXAhB,qBAAU,WACR,IAIIiB,EAAgBf,aAJD,WACjBtC,EAAKW,WAAWX,EAAKS,aAAe,KAGM,KAC5C,OAAO,WACL8B,cAAcc,GACdb,QAAQC,IAAI,cAEb,CAACzC,IAEF,yBAAKY,UAAU,OACb,mDACA,yBAAKA,UAAU,WACb,4CACA,kBAAC,EAAD,CAAaZ,KAAMA,EAAM2B,aAAc,SAAC2B,GAAD,OAAQF,EAAQE,OAEzD,yBAAK1C,UAAU,YACb,6CACA,kBAAC,EAAD,CAAcZ,KAAMA,EAAM2B,aAAc,SAAC2B,GAAD,OAAQF,EAAQE,SChB5CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.6565c729.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './ClockEditor.scss';\n\nexport default function ClockEditor(props) {\n    const { date, onClose } = props;\n    const [hours, setHours] = useState(date.getHours());\n    const [minutes, setMinutes] = useState(date.getMinutes());\n    const [seconds, setSeconds] = useState(date.getSeconds());\n    const handleClose = () => {\n        if (onClose) { onClose(date); }\n    }\n    const handleOk = () => {\n        const date = new Date();\n        date.setHours(hours);\n        date.setMinutes(minutes);\n        date.setSeconds(seconds);\n        if (onClose) { onClose(date); }\n    }\n    return (\n        <div className=\"modal show-modal\">\n            <div className=\"modal-content\">\n                <span className=\"close-button\" onClick={handleClose} >&times;</span>\n                <h3>Edit Time</h3>\n                <div className=\"clock-editor\">\n                    <select defaultValue={hours} onChange={(e) => setHours(e.target.value)}>\n                        {[...Array(24)].map((x, i) =>\n                            <option key={i} >{i}</option>\n                        )}\n                    </select>\n                    :\n                    <select defaultValue={minutes} onChange={(e) => setMinutes(e.target.value)}>\n                        {[...Array(60)].map((x, i) =>\n                            <option key={i} >{i}</option>\n                        )}\n                    </select>\n                    :\n                    <select defaultValue={seconds} onChange={(e) => setSeconds(e.target.value)}>\n                        {[...Array(60)].map((x, i) =>\n                            <option key={i} >{i}</option>\n                        )}\n                    </select>\n                    <button className=\"ok-button\" onClick={handleOk}>Ok</button>\n                </div>\n\n            </div>\n        </div>\n\n    )\n}\n","import React, { useState, useEffect, useRef, useCallback } from 'react'\nimport './AnalogClock.scss';\nimport ClockEditor from '../ClockEditor';\n\nexport default function AnalogClock(props) {\n    const { date, datediff, onDateChange } = props;\n    const refClockInterval = useRef(null);\n\n    const [hours, setHours] = useState(date.getHours());\n    const [minutes, setMinutes] = useState(date.getMinutes());\n    const [seconds, setSeconds] = useState(date.getSeconds());\n    const [showEditor, setShowEditor] = useState(false)\n\n    const handleDate = useCallback(\n        () => {\n            const formatTime = (time) => {\n                return time < 10 ? `0${time}` : time;\n            }\n            date.setHours(date.getHours() + (datediff || 0));\n            setHours(formatTime(date.getHours()));\n            setMinutes(formatTime(date.getMinutes()));\n            setSeconds(formatTime(date.getSeconds()));\n        },\n        [datediff, date],\n    );\n\n    useEffect(() => {\n\n        refClockInterval.current = setInterval(handleDate, 1000);\n        return () => {\n            clearInterval(refClockInterval.current);\n            console.log('cleared');\n        }\n    }, [datediff, refClockInterval, date, handleDate])\n\n    const secondsDeg = seconds * 360 / 60;\n    const minutesDeg = (minutes * 360 / 60) + (seconds * 360 / 60) / 60;\n    const hoursDeg = hours * 360 / 12 + ((minutes * 360 / 60) / 12);\n\n    const secondsStyle = {\n\n        transform: `rotate(${secondsDeg}deg) translate(-50%, -50%)`\n    };\n    const minutesStyle = {\n        transform: `rotate(${minutesDeg}deg) translate(-50%, -50%)`\n    };\n    const hoursStyle = {\n        transform: `rotate(${hoursDeg}deg) translate(-50%, -50%)`\n    };\n\n    const handleEdit = () => {\n        clearInterval(refClockInterval.current);\n        setShowEditor(true);\n    }\n    const handleEditClose = (date) => {\n        refClockInterval.current = setInterval(handleDate, 1000);\n        setShowEditor(false);\n        onDateChange(date);\n    }\n    return (\n        <div className=\"analog-root\">\n            <div className={\"analog-clock\"}>\n                <div className={\"inner\"}>\n                    <div className={\"hand second\"} style={secondsStyle} />\n                    <div className={\"hand minute\"} style={minutesStyle} />\n                    <div className={\"hand hour\"} style={hoursStyle} />\n                    <div className=\"graduations\">\n                        {[...Array(60)].map((x, i) =>\n                            <div className=\"graduation\" key={i} />\n                        )}\n                    </div>\n                </div>\n                <div className=\"clock-setting\">\n                    <i className=\"fa fa-cog\" aria-hidden=\"true\" onClick={handleEdit} ></i>\n                </div>\n                {showEditor && <ClockEditor date={date} onClose={handleEditClose} />}\n            </div>\n        </div>\n    );\n}\n","import React, { useState, useEffect, useRef, useCallback } from 'react'\nimport './DigitalClock.scss';\nimport ClockEditor from '../ClockEditor';\n\nexport default function DigitalClock(props) {\n    const { date, datediff, onDateChange } = props;\n    const refClockInterval = useRef(null);\n\n    const [hours, setHours] = useState(date.getHours());\n    const [minutes, setMinutes] = useState(date.getMinutes());\n    const [seconds, setSeconds] = useState(date.getSeconds());\n    const [showEditor, setShowEditor] = useState(false)\n\n    const handleDate = useCallback(\n        () => {\n            const formatTime = (time) => {\n                return time < 10 ? `0${time}` : time;\n            }\n            date.setHours(date.getHours() + (datediff || 0));\n            setHours(formatTime(date.getHours()));\n            setMinutes(formatTime(date.getMinutes()));\n            setSeconds(formatTime(date.getSeconds()));\n        },\n        [datediff, date],\n    );\n\n    useEffect(() => {\n\n        refClockInterval.current = setInterval(handleDate, 1000);\n        return () => {\n            clearInterval(refClockInterval.current);\n            console.log('cleared');\n        }\n    }, [datediff, refClockInterval, date, handleDate])\n\n    const handleEdit = () => {\n        clearInterval(refClockInterval.current);\n        setShowEditor(true);\n    }\n    const handleEditClose = (date) => {\n        refClockInterval.current = setInterval(handleDate, 1000);\n        setShowEditor(false);\n        onDateChange(date);\n    }\n    return (\n        <div className=\"digital-root\">\n            <div className=\"digital-clock\">\n                <div className=\"inner\">\n                    <span className=\"span\" > {hours}</span>\n                :<span className=\"span\">{minutes}</span>\n                :<span className=\"span\">{seconds}</span>\n                </div>\n                <div className=\"clock-setting\">\n                    <i className=\"fa fa-cog\" aria-hidden=\"true\" onClick={handleEdit} ></i>\n                </div>\n            </div>\n            {showEditor && <ClockEditor date={date} onClose={handleEditClose} />}\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport AnalogClock from './components/AnalogClock';\nimport DigitalClock from './components/DigitalClock';\n\nfunction App() {\n  const [date, setDate] = useState(new Date());\n\n  useEffect(() => {\n    const handleDate = () => {\n      date.setSeconds(date.getSeconds() + 1)\n    }\n\n    let clockInterval = setInterval(handleDate, 1000);\n    return () => {\n      clearInterval(clockInterval);\n      console.log('cleared');\n    }\n  }, [date])\n  return (\n    <div className=\"App\">\n      <h1>Synchronized Clocks</h1>\n      <div className=\"leftDiv\">\n        <h1>Analog Clock</h1>\n        <AnalogClock date={date} onDateChange={(dt) => setDate(dt)} />\n      </div>\n      <div className=\"rightDiv\">\n        <h1>Digital Clock</h1>\n        <DigitalClock date={date} onDateChange={(dt) => setDate(dt)} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}